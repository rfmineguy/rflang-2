The parse tree is the most important underlying data structure for a programming language.
It contains all the information about a rflang file in an orderly manner

Example:
use io
fn add(a: int, b: int) -> int {
  sum: int = a + b;
  return sum;
}
fn process(argc: int, argv: char**) -> int {

}
fn main(argc: int, argv: char**) {
  if (argc < 9) {
    add(5, 9); 
  } else {
    process(argc, argv);
  }
}

\_Program
  \_Use[file="io"]
  \_Function[name="add"]
    \_ParamList[{a, int}, {b, int}]
    \_ReturnType[t="int"]
    \_Block
      \_Assign
        \_Var{sum, int}
        \_Expr[{a: var}, {plus}, {b: var}]
      \_Return{sum, var}
  \_Function[name="process"]
    \_ParamList[{argc: int}, {argv, char**}]
    \_Block
  \_Function[name="main"]
    \_ParamList[{argc, int}, {argv, char**}]
    \_If[cond="argc < 9"]
      \_Block
        \_FuncCall[name="add"]
          \_ArgList[{5: int_lit}, {9: int_lit}]
    \_Else
      \_Block
        \_FuncCall[name="process"]
          \_ArgList[{argc: var}, {argv: var}]
    




Parsing expressions
5 + 3 - 5 * (4 - 3)
\_Expr[5 + 3 - 5 * (4-3)]
  \_ 5 * Expr[
