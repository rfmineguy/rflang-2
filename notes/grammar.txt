{ ... } indicates optionals
?       in optional indicates variable amount

program
  - use[]
  - func[]

expression
  | {NUM ID}
  | expression '+' expression
  | expression '-' expression
  | expression '*' expression
  | expression '/' expression
  | expression '%' expression
  | '(' expression ')'

use
  | USE ID

var
  | ID COLON TP {MUL?}

assign
  | var EQ expr

return
  | RET expr

param_list
  | var {COMMA var}

arg_list
  | expr {COMMA expr}

func_decl
  | FN ID param_list

func
  | func_decl {COL TP} block

func_call
  | ID LP arg_list RP 


// ================================================================================================
// TESING GRAMMAR
// ================================================================================================
fn main(argc: int, argv: char**) {

}

FN ID LP ID COLON TP COMMA ID COLON TP MUL MUL RP LB

RB

FN ID LP var COMMA var RP LB

RB

FN ID param_list LB

RB

func_decl param_list block


// ================================================================================================
fn add(a: u8, b: u8): u16 {
  return a + b;
}


FN ID LP ID COL TP COMMA ID COL TP RP COL TP LB
  RET ID PL ID SEMI
RB

FN ID LP var COMMA var RP COL TP LB
  RET expr PL expr SEMI
RB

FN ID param_list COL TP LB

RB

func_decl

// ================================================================================================
use io

fn add(a: int, b: int): int {
  return a + b;
}

fn main(argc: int, argv: char**): int {
  
}
